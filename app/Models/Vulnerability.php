<?php

namespace App\Models;

use App\Models\Scopes\ActiveVulnerabilityScope;
use App\Traits\{FilterableTrait, LowercaseAttributes, PaginateResults, SearchableTrait, SortableTrait, TaggableTrait};
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Casts\Attribute;

class Vulnerability extends Model
{
    use HasFactory;
    use SearchableTrait;
    use SortableTrait;
    use TaggableTrait;
    use FilterableTrait;
    use LowercaseAttributes;
    use PaginateResults;

    protected static function booted()
    {
        static::addGlobalScope(new ActiveVulnerabilityScope());
    }
    protected $table = 'vulnerabilities';
    protected $guarded = [];

    protected $appends = [
        'vulnerability_id',
        'cve_data',
        'tag_value'
    ];

    protected $hidden = ['CVEs'];

    public function exploits()
    {
        return $this->hasMany(Exploits::class, 'vul_id');
    }

    public function patches()
    {
        return $this->hasMany(Patch::class, 'vul_id');
    }

    public function assetrelations()
    {
        return $this->belongsToMany(Asset::class, 'vulnerables');
    }

    public function assetrelationsTrashed()
    {
        return $this->belongsToMany(Asset::class, 'vulnerables')->onlyTrashed();
    }

    public function vulnerabilityId(): Attribute
    {
        return new Attribute(get: fn ($value) => 'VUL00' . $this->id, );
    }

    public function cveData(): Attribute
    {
        $cve = json_decode($this->CVEs);
        return new Attribute(get: fn ($value) => ($cve) ? $cve->cves : [], );
    }

    public function tags()
    {
        return $this->morphToMany(Tag::class, 'taggable')->select('tags.id as tag_id', 'tags.name');
    }

    public function tagValue(): Attribute
    {
        $tags = $this->tags()->get(['id', 'name']);
        return new Attribute(get: fn ($value) => $tags->map(fn ($tag) => [
            'id' => $tag->tag_id,
            'name' => $tag->name,
        ])->toArray());
    }
}
